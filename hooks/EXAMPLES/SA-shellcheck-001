#!/bin/bash
#	hooks/EXAMPLES/SA-shellcheck-001  2.209.905  2019-10-12T16:41:59.522000-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.208  
#	   hooks/EXAMPLES/SA-shellcheck-001  change tmp.file  to  SA-shellcheck-001 
#	hooks/EXAMPLES/SA-shellcheck-001  2.207.902  2019-10-12T09:29:37.900113-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.206  
#	   hooks/EXAMPLES/SA-shellcheck-001   continue to make changes to this SA-shellcheck-001 #35 
#	hooks/EXAMPLES/SA-shellcheck-001  2.206.901  2019-10-12T08:21:34.731611-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.205-14-g94bc313  
#	   hooks/EXAMPLES/SA-shellcheck-001   fixing this again  #35 
#86# hooks/EXAMPLES/SA-shellcheck-001 - test case
#    Can be found: https://github.com/koalaman/shellcheck
###  Production standard 3.0 shellcheck
###  Production standard 5.1.160 Copyright
#    Copyright (c) 2019 Bradley Allen
#    MIT License is in the online DOCUMENTATION, DOCUMENTATION URL defined below.
###  Production standard 1.3.496 DEBUG variable
#    Order of precedence: environment variable, default code
if [[ "${DEBUG}" == ""  ]] ; then DEBUG="0" ; fi   # 0 = debug off, 1 = debug on, 'export DEBUG=1', 'unset DEBUG' to unset environment variable (bash)
if [[ "${DEBUG}" == "2" ]] ; then set -x    ; fi   # Print trace of simple commands before they are executed
if [[ "${DEBUG}" == "3" ]] ; then set -v    ; fi   # Print shell input lines as they are read
if [[ "${DEBUG}" == "4" ]] ; then set -e    ; fi   # Exit command has a non-zero exit status
#
BOLD=$(tput -Txterm bold)
NORMAL=$(tput -Txterm sgr0)
RED=$(tput    setaf 1)
GREEN=$(tput  setaf 2)
YELLOW=$(tput setaf 3)
CYAN=$(tput   setaf 6)
#    Date and time function ISO 8601
get_date_stamp() {
  DATE_STAMP=$(date +%Y-%m-%dT%H:%M:%S.%6N%:z)
  TEMP=$(date +%Z)
  DATE_STAMP="${DATE_STAMP} (${TEMP})"
}

#    Fully qualified domain name FQDN hostname
LOCALHOST=$(hostname -f)

#    Version
#    Assumptions for the next two lines of code:  The second line in this script includes the script path & name as the second item and
#    the script version as the third item separated with space(s).  The tool I use is called 'markit'. See example line below:
#       template/template.sh  3.517.783  2019-09-13T18:20:42.144356-05:00 (CDT)  https://github.com/BradleyA/user-files.git  uadmin  one-rpi3b.cptx86.com 3.516  
SCRIPT_NAME=$(head -2 "${0}" | awk '{printf $2}')
SCRIPT_VERSION=$(head -2 "${0}" | awk '{printf $3}')
if [[ "${SCRIPT_NAME}" == "" ]] ; then SCRIPT_NAME="${0}" ; fi
if [[ "${SCRIPT_VERSION}" == "" ]] ; then SCRIPT_VERSION="v?.?" ; fi

#    UID and GID
USER_ID=$(id -u)
GROUP_ID=$(id -g)

###  Production standard 2.3.512 log format (WHEN WHERE WHAT Version Line WHO UID:GID [TYPE] Message)
new_message() {  #  $1="${SCRIPT_NAME}"  $2="${LINENO}"  $3="DEBUG INFO ERROR WARN"  $4="message"
  get_date_stamp
  echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${1}[$$] ${SCRIPT_VERSION} ${2} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[${3}]${NORMAL}  ${4}"
}

if [[ "${DEBUG}" == "1" ]] ; then new_message "${SCRIPT_NAME}" "${LINENO}" "DEBUG" "  Started..." 1>&2 ; fi

if [[ ! -x ${1} ]] ; then  #  #34  Command invoked does not exist or cannot execute
  RETURN_CODE=126
  new_message "${SCRIPT_NAME}" "${LINENO}" "ERROR" "${RETURN_CODE} - File, ${1}, does not exist or have execute permission" 1>&2
  echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} 126 - File, ${1}, does not exist or have execute permission - ${BOLD}${CYAN}ERROR - ERROR${NORMAL}"
  exit "${RETURN_CODE}"
fi

###  Place test case here

#    NOTE: SA-shellcheck-001.expected file is REQUIRED in the test directory.  Either an empty file if no error are expected or a file with expected errors

if [[ ! -e "${0}.expected" ]] ; then
  echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} ${RETURN_CODE} - ${0}.expected was not found.  ${BOLD}${0}.expected file is REQUIRED in the test directory.${NORMAL}  Creating file - ${BOLD}${YELLOW}INFO - INFO${NORMAL}"
  touch "${0}.expected"
fi

if [[ -s ${1} ]] ; then  #  file size is greater than zero
  TMP_FILE_1=$(mktemp)  #  create temporary file in /tmp
  TMP_FILE_2=$(mktemp)  #  create temporary file in /tmp
  head -1 "${1}" > "${TMP_FILE_1}"  #  copy the first line 
#  TMP1=$(head -c 1 "${TMP_FILE_1}")  # first character on first line in file which is assumed as the file's comment character
  cp "${1}" "${TMP_FILE_2}"  #  make a copy of file
  TMP2=$(awk '$1~/^[^#]/{print NR; exit}' "${TMP_FILE_2}")  #  Locate line number of first line without comment
  tail -n+"${TMP2}"  "${TMP_FILE_2}" >> "${TMP_FILE_1}"
  rm -f "${TMP_FILE_2}"
  mkdir -p tmp
  cd tmp || exit  #  shellcheck SC2103 requires || exit crap
  cp "${TMP_FILE_1}" SA-shellcheck-001
  rm -f "${TMP_FILE_1}"
  shellcheck SA-shellcheck-001 > SA-shellcheck-001.test-case-output  #  analyse code for potential errors
  cp SA-shellcheck-001.test-case-output ..
  cd ..
  diff SA-shellcheck-001.expected SA-shellcheck-001.test-case-output >/dev/null 2>&1
  RETURN_CODE=${?}
else
  new_message "${SCRIPT_NAME}" "${LINENO}" "ERROR" "  File, ${0}, is empty" 1>&2
  RETURN_CODE=2
fi

if [[ "${RETURN_CODE}" -eq 0 ]] ; then
  echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} ${RETURN_CODE} - No difference with expected output - ${BOLD}${GREEN}PASS - PASS${NORMAL}"
  rm -r ./tmp
  exit 0
elif [[ ${RETURN_CODE} -eq 1 ]] ; then
  echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} ${RETURN_CODE} - Differences with expected output - ${BOLD}${RED}FAIL - FAIL${NORMAL}"
  diff SA-shellcheck-001.expected SA-shellcheck-001.test-case-output
  exit 1
else 
  echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} ${RETURN_CODE} - Test script ERROR - ${BOLD}${CYAN}ERROR - ERROR${NORMAL}"
  exit 2
fi
echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} 124 - Test script logic ERROR - ${BOLD}${CYAN}ERROR - ERROR${NORMAL}"
exit 124
###
