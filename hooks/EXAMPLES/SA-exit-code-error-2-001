#!/bin/bash
#	hooks/EXAMPLES/SA-exit-code-error-2-001  2.170.826  2019-10-01T13:52:01.769001-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.169  
#	   #37   added color to output 
#	hooks/EXAMPLES/SA-exit-code-error-2-001  2.167.822  2019-10-01T13:06:11.910745-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.166  
#	   #37   added color to output 
#	hooks/EXAMPLES/SA-exit-code-error-2-001  2.138.787  2019-09-27T12:33:39.502376-05:00 (CDT)  https://github.com/BradleyA/git-TEST-commit-automation.git  uadmin  five-rpi3b.cptx86.com 2.137  
#	   close #34    EXAMPLES/SA-* FVT-*   added NO -x ${1} exit ERROR 126 
#86# hooks/EXAMPLES/SA-exit-code-error-2-001 - test case
###  Production standard 3.0 shellcheck
###  Production standard 5.1.160 Copyright
#    Copyright (c) 2019 Bradley Allen
#    MIT License is in the online DOCUMENTATION, DOCUMENTATION URL defined below.
###  Production standard 1.3.496 DEBUG variable
#    Order of precedence: environment variable, default code
if [[ "${DEBUG}" == ""  ]] ; then DEBUG="0" ; fi   # 0 = debug off, 1 = debug on, 'export DEBUG=1', 'unset DEBUG' to unset environment variable (bash)
if [[ "${DEBUG}" == "2" ]] ; then set -x    ; fi   # Print trace of simple commands before they are executed
if [[ "${DEBUG}" == "3" ]] ; then set -v    ; fi   # Print shell input lines as they are read
if [[ "${DEBUG}" == "4" ]] ; then set -e    ; fi   # Exit command has a non-zero exit status
#
BOLD=$(tput -Txterm bold)
NORMAL=$(tput -Txterm sgr0)
YELLOW=$(tput setaf 3)
CYAN=$(tput   setaf 6)
#    Date and time function ISO 8601
get_date_stamp() {
  DATE_STAMP=$(date +%Y-%m-%dT%H:%M:%S.%6N%:z)
  TEMP=$(date +%Z)
  DATE_STAMP="${DATE_STAMP} (${TEMP})"
}

#    Fully qualified domain name FQDN hostname
LOCALHOST=$(hostname -f)

#    Version
#    Assumptions for the next two lines of code:  The second line in this script includes the script path & name as the second item and
#    the script version as the third item separated with space(s).  The tool I use is called 'markit'. See example line below:
#       template/template.sh  3.517.783  2019-09-13T18:20:42.144356-05:00 (CDT)  https://github.com/BradleyA/user-files.git  uadmin  one-rpi3b.cptx86.com 3.516  
SCRIPT_NAME=$(head -2 "${0}" | awk '{printf $2}')
SCRIPT_VERSION=$(head -2 "${0}" | awk '{printf $3}')
if [[ "${SCRIPT_NAME}" == "" ]] ; then SCRIPT_NAME="${0}" ; fi
if [[ "${SCRIPT_VERSION}" == "" ]] ; then SCRIPT_VERSION="v?.?" ; fi

#    UID and GID
USER_ID=$(id -u)
GROUP_ID=$(id -g)

###  Production standard 2.3.512 log format (WHEN WHERE WHAT Version Line WHO UID:GID [TYPE] Message)
new_message() {  #  $1="${SCRIPT_NAME}"  $2="${LINENO}"  $3="DEBUG INFO ERROR WARN"  $4="message"
  get_date_stamp
  echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${1}[$$] ${SCRIPT_VERSION} ${2} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[${3}]${NORMAL}  ${4}"
}

if [[ "${DEBUG}" == "1" ]] ; then new_message "${SCRIPT_NAME}" "${LINENO}" "DEBUG" "  Started..." 1>&2 ; fi

if [[ ! -x ${1} ]] ; then  #  #34  Command invoked does not exist or cannot execute
  RETURN_CODE=126
  new_message "${SCRIPT_NAME}" "${LINENO}" "ERROR" "${RETURN_CODE} - File, ${1}, does not exist or have execute permission" 1>&2
  echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} 126 - File, ${1}, does not exist or have execute permission - ${BOLD}${CYAN}ERROR - ERROR${NORMAL}"
  exit "${RETURN_CODE}"
fi

###     Appendix E. Exit Codes With Special Meanings
#       Exit      Meaning                            Example                    Comments
#       1         Catchall for general errors        let "var1 = 1/0"           Miscellaneous errors, such as "divide by zero" and other impermissible operations
#       2         Misuse of shell builtins           empty_function() {}        Missing keyword or command, or permission problem (and diff return code on a failed binary file comparison).
#       126       Command invoked cannot execute     /dev/null                  Permission problem or command is not an executable
#       127       "command not found"                illegal_command            Possible problem with $PATH or a typo
#       128       Invalid argument to exit           exit 3.14159               exit takes only integer args in the range 0 - 255
#       128+n     Fatal error signal "n"             kill -9 $PPID of script    $? returns 137 (128 + 9)
#       130       Script terminated by Control-C     Ctl-C                      Control-C is fatal error signal 2, (130 = 128 + 2, see above)
#       255*      Exit status out of range           exit -1                    exit takes only integer args in the range 0 - 255

###     Place test case here

echo "${BOLD}${YELLOW}Test case --->${NORMAL} ${0} ${1} 2 - exit code 2: report test case error exit code total - ${BOLD}${CYAN}ERROR - ERROR${NORMAL}"
exit 2
###
